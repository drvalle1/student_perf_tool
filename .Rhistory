setwd('U:\\natercia\\naive Bayes')
dat=read.csv('CANVAS data.csv',as.is=T)
tipos='..33'
#find data quiz columns
ind=grep('Data.Quiz',colnames(dat)); colnames(dat)[ind]
data.quiz=dat[,ind];
#clean names of this dataset
tmp=colnames(data.quiz)
tmp1=strsplit(tmp,split=tipos)
tmp2=unlist(tmp1)
dataq.nomes=tmp2[seq(from=1,to=length(tmp2),by=2)]
print(dataq.nomes)
colnames(data.quiz)=dataq.nomes
#find conceptual quiz columns
ind2=grep('Conceptual',colnames(dat)); colnames(dat)[ind2]
concep.quiz=dat[,ind2]
#clean names of this dataset
tmp=colnames(concep.quiz)
tmp1=strsplit(tmp,split='Conceptual')
tmp2=unlist(tmp1)
tmp3=tmp2[seq(from=1,to=length(tmp2),by=2)]
concepq.nomes=paste(tmp3,'concept',sep='')
print(concepq.nomes)
colnames(concep.quiz)=concepq.nomes
#just keep relevant columns, eliminate first row
dat1=cbind(dat[,c('Student','SIS.Login.ID','SIS.User.ID')],data.quiz,concep.quiz)
dat2=dat1[-1,]
#round scores
nomes=c(concepq.nomes,dataq.nomes)
for (i in 1:length(nomes)){
dat2[,nomes[i]]=round(dat2[,nomes[i]])
}
head(dat2)
write.csv(dat2,'clean data.csv',row.names=F)
rm(list=ls())
setwd('U:\\natercia\\naive Bayes')
dat2=read.csv('clean data.csv',as.is=T)
setwd('U:\\natercia\\naive Bayes\\historic probabilities')
probs=read.csv('indiv probabilities.csv',as.is=T)
rownames(probs)=probs$X
probs=probs[,-1]
nomes=colnames(probs)
nomes
colnames(dat2)
nomes=nomes[nomes%in%colnames(dat2)]
nomes
ltt=c('A','B','C','D & E')
nltt=length(ltt)
nstud=nrow(dat2)
res1=array(NA,dim=c(nstud,nltt,length(nomes)))
for (i in 1:length(nomes)){
probs1=probs[ltt,nomes[i]]
max1=probs['maximo',nomes[i]]
res=matrix(NA,nstud,nltt)
assign.score=dat2[,nomes[i]]
cond=!is.na(assign.score)
for (j in 1:nltt){
res[cond,j]=dbinom(assign.score[cond],size=max1,prob=probs1[j])
res[!cond,j]=1
}
colnames(res)=ltt
res1[,,i]=res
}
num=c(1:6,8,7,9:13)
num1=c()
for (i in 1:length(num)) {
ind=grep(num[i],nomes)
if (length(ind)>0) num1=c(num1,num[i])
}
num1
num=c(1:6,8,7,9:13)
modules=paste('Module.',num,'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (i==1 & length(ind)>0) prob.tmp=res1[,,ind] #no data quiz
if (i!=1 & length(ind)>0) {
# prob.tmp=res1[,,ind[1]]*res1[,,ind[2]]*prob.acc
z=log(res1[,,ind[1]])+log(res1[,,ind[2]])+log(prob.acc)
prob.tmp=exp(z-apply(z,1,max))
}
prob.acc=prob.tmp/apply(prob.tmp,1,sum)
colnames(prob.acc)=ltt
tmp=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],prob.acc,modules[i],i)
colnames(tmp)[c(ncol(tmp)-1,ncol(tmp))]=c('module','week')
fim=rbind(fim,tmp)
}
head(fim)
hist(fim$A[fim$week==1])
hist(fim$A[fim$week==2])
hist(fim$A[fim$week==3])
hist(fim$A[fim$week==4])
num=c(1:6,8,7,9:13)
modules=paste('Module.',num,'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (i==1 & length(ind)>0) prob.tmp=res1[,,ind] #no data quiz
if (i!=1 & length(ind)>0) {
# prob.tmp=res1[,,ind[1]]*res1[,,ind[2]]*prob.acc
z=log(res1[,,ind[1]])+log(res1[,,ind[2]])+log(prob.acc)
prob.tmp=exp(z-apply(z,1,max))
}
prob.acc=prob.tmp/apply(prob.tmp,1,sum)
colnames(prob.acc)=ltt
tmp=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],prob.acc,modules[i],i)
colnames(tmp)[c(ncol(tmp)-1,ncol(tmp))]=c('module','week')
fim=rbind(fim,tmp)
}
setwd('U:\\natercia\\student_pred_tool')
write.csv(fim,'naive bayes results.csv',row.names=F)
nomes
num=c(1:6,8,7,9:13)
modules=paste('Module.',num,'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (i==1 & length(ind)>0) prob.tmp=res1[,,ind] #no data quiz
if (i!=1 & length(ind)>0) {
# prob.tmp=res1[,,ind[1]]*res1[,,ind[2]]*prob.acc
z=log(res1[,,ind[1]])+log(res1[,,ind[2]])+log(prob.acc)
prob.tmp=exp(z-apply(z,1,max))
}
prob.acc=prob.tmp/apply(prob.tmp,1,sum)
colnames(prob.acc)=ltt
tmp=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],prob.acc,modules[i],i)
colnames(tmp)[c(ncol(tmp)-1,ncol(tmp))]=c('module','week')
fim=rbind(fim,tmp)
}
setwd('U:\\natercia\\student_pred_tool')
write.csv(fim,'naive bayes results.csv',row.names=F)
head(fim)
range(fim$week)
nomes
num=c(1:6,8,7,9:13)
modules=paste('Module.',num,'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (length(ind)>0){
if (i==1) prob.tmp=res1[,,ind] #no data quiz
if (i!=1) {
# prob.tmp=res1[,,ind[1]]*res1[,,ind[2]]*prob.acc
z=log(res1[,,ind[1]])+log(res1[,,ind[2]])+log(prob.acc)
prob.tmp=exp(z-apply(z,1,max))
}
prob.acc=prob.tmp/apply(prob.tmp,1,sum)
colnames(prob.acc)=ltt
tmp=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],prob.acc,modules[i],i)
colnames(tmp)[c(ncol(tmp)-1,ncol(tmp))]=c('module','week')
fim=rbind(fim,tmp)
}
}
head(fim)
max(fim$week)
num=c(1:6,8,7,9:13)
modules=paste('Module.',num,'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (length(ind)>0){
if (i==1) prob.tmp=res1[,,ind] #no data quiz
if (i!=1) {
# prob.tmp=res1[,,ind[1]]*res1[,,ind[2]]*prob.acc
z=log(res1[,,ind[1]])+log(res1[,,ind[2]])+log(prob.acc)
prob.tmp=exp(z-apply(z,1,max))
}
prob.acc=prob.tmp/apply(prob.tmp,1,sum)
colnames(prob.acc)=ltt
tmp=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],prob.acc,modules[i],i)
colnames(tmp)[c(ncol(tmp)-1,ncol(tmp))]=c('module','week')
fim=rbind(fim,tmp)
}
}
setwd('U:\\natercia\\student_pred_tool')
write.csv(fim,'naive bayes results.csv',row.names=F)
rm(list=ls())
set.seed(1)
setwd('U:\\natercia\\naive Bayes')
dat=read.csv('CANVAS data.csv',as.is=T)[-1,]
dat1=dat[,c('SIS.User.ID','SIS.Login.ID')]
dat1$passwd=dat1$trat=NA
#create password
for (i in 1:nrow(dat1)){
tmp=sample(LETTERS,size=5,replace=T)
tmp1=numeric()
for(j in 1:5) tmp1=paste(tmp1,tmp[j],sep='')
dat1$passwd[i]=tmp1
}
#assign treatments
tot.treat=floor(nrow(dat1)/3)
tmp=c(rep(1:3,each=tot.treat),rep(3,nrow(dat1)-tot.treat*3))
# table(tmp)
#shuffle this treatment
dat1$trat=tmp[order(runif(nrow(dat1)))]
setwd('U:\\natercia\\student_pred_tool')
write.csv(dat1,'students.csv',row.names=F)
setwd('U:\\natercia\\student_perf_tool')
write.csv(dat1,'students.csv',row.names=F)
rm(list=ls())
set.seed(1)
setwd('U:\\natercia\\naive Bayes')
dat=read.csv('CANVAS data.csv',as.is=T)[-1,]
dat1=dat[,c('SIS.User.ID','SIS.Login.ID')]
dat1$passwd=dat1$trat=NA
#create password
for (i in 1:nrow(dat1)){
tmp=sample(LETTERS,size=5,replace=T)
tmp1=numeric()
for(j in 1:5) tmp1=paste(tmp1,tmp[j],sep='')
dat1$passwd[i]=tmp1
}
#assign treatments
tot.treat=floor(nrow(dat1)/3)
tmp=c(rep(1:3,each=tot.treat),rep(3,nrow(dat1)-tot.treat*3))
# table(tmp)
#shuffle this treatment
dat1$trat=tmp[order(runif(nrow(dat1)))]
setwd('U:\\natercia\\student_pred_tool')
write.csv(dat1,'students.csv',row.names=F)
setwd('U:\\natercia\\student_perf_tool')
write.csv(dat1,'students.csv',row.names=F)
library(shiny)
runApp('U:\\natercia\\student_pred_tool')
rm(list=ls())
setwd('U:\\natercia\\naive Bayes')
dat2=read.csv('clean data.csv',as.is=T)
nomes=colnames(dat2)
#sum results for each week
modules=paste('Module.',c(1:6,8,7,9:13),'.',sep='')
nmodules=length(modules)
fim=matrix(NA,nrow(dat2),nmodules)
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (length(ind)>0){
if (i==1) fim[,i]=dat2[,ind]
if (i!=1) fim[,i]=apply(dat2[,ind],1,sum)
}
}
colnames(fim)=paste('week',1:nmodules,sep='')
head(fim)
rm(list=ls())
setwd('U:\\natercia\\naive Bayes')
dat2=read.csv('clean data.csv',as.is=T)
nomes=colnames(dat2)
#sum results for each week
modules=paste('Module.',c(1:6,8,7,9:13),'.',sep='')
nmodules=length(modules)
fim=numeric()
for (i in 1:nmodules){
ind=grep(modules[i],nomes,fixed=T)
if (length(ind)>0){
if (i==1) fim=cbind(fim,dat2[,ind])
if (i!=1) fim=cbind(fim,apply(dat2[,ind],1,sum))
}
}
colnames(fim)=paste('week',1:ncol(fim),sep='')
head(fim)
fim1=cbind(dat2[,c('Student','SIS.Login.ID','SIS.User.ID')],fim)
#get student file and merge to get passwords and treatment info
setwd('U:\\natercia\\student_pred_tool')
k=read.csv('students.csv',as.is=T)
fim2=merge(fim1,k,all=T); dim(fim1); dim(fim2)
#output results
setwd('U:\\natercia\\student_perf_tool')
write.csv(fim2,'performance data.csv',row.names=F)
setwd('U:\\natercia\\student_perf_tool')
dat=read.csv('performance data.csv',as.is=T)
#set up colors
cores=hsv(h=c(0,0.175,0.35),1,1,alpha=0.5)
head(dat)
dat=read.csv('performance data.csv',as.is=T)
#set up colors
cores=hsv(h=c(0,0.175,0.35),1,1,alpha=0.5)
#how many weeks so far?
ind=grep('week',colnames(dat))
nomes=colnames(dat)[ind]
nomes1=gsub('week','',nomes)
nomes1
nweek=max(as.numeric(nomes1))
nweek
nomes=paste('week',1:nweek,sep='')
dat=read.csv('performance data.csv',as.is=T)
head(dat)
input=list()
input$ufid=14839042
input$email='jbaldwin46@ufl.edu'
input$passwd='MSZJU'
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
#if student not found
if (sum(cond)==0) {
plot(NA,NA,xlim=c(0,1),ylim=c(0,1))
text(0.5,0.5,'User not found',col='red')
}
#if student found
if (sum(cond)>0){
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat[ind,nomes[i]] >= dat[,nomes[i]],na.rm=T)
}
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Weekly performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
#show trend through time
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
}
#show results for a specific student
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
#if student not found
if (sum(cond)==0) {
plot(NA,NA,xlim=c(0,1),ylim=c(0,1))
text(0.5,0.5,'User not found',col='red')
}
ind=which(is.na(dat1[ind,nomes]))
dat1=t(apply(dat[,nomes],1,cumsum))
ind=which(is.na(dat[ind,nomes]))
ind
dat
head(dat)
dat[ind,nomes]
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
ind
nomes
dat[ind,nomes]
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
ind1=which(is.na(dat[ind,nomes]))
if (length(ind1)>0) dat[,ind1]=0
dat1=t(apply(dat[,nomes],1,cumsum))
ind1
ind
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat1[ind,nomes[i]] >= dat1[,nomes[i]],na.rm=T)
}
#if missing data exist
cond=sum(is.na(dat1[ind,nomes]))
if (sum(cond)>0) {
plot(NA,NA,xlim=c(0,1),ylim=c(0,1))
text(0.5,0.5,'Cannot be calculated because of missing data',col='red')
}
if (sum(cond)==0){
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Cumulative performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
}
library(shiny)
runApp('U:\\natercia\\student_perf_tool')
library(shiny)
runApp('U:\\natercia\\student_perf_tool')
library(shiny)
runApp('U:\\natercia\\student_perf_tool')
library(shiny)
runApp('U:\\natercia\\student_perf_tool')
# setwd('U:\\natercia\\student_perf_tool')
dat=read.csv('performance data.csv',as.is=T)
#set up colors
cores=hsv(h=c(0,0.175,0.35),1,1,alpha=0.5)
#how many weeks so far?
ind=grep('week',colnames(dat))
nomes=colnames(dat)[ind]
nomes1=gsub('week','',nomes)
nweek=max(as.numeric(nomes1))
nomes=paste('week',1:nweek,sep='')
input=list()
input$ufid=6934369
input$email='ebecks@ufl.edu'
input$passwd='KAJWI'
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
#if student not found
if (sum(cond)==0) {
plot(NA,NA,xlim=c(0,1),ylim=c(0,1))
text(0.5,0.5,'User not found',col='red')
}
#if student found
if (sum(cond)>0){
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat[ind,nomes[i]] >= dat[,nomes[i]],na.rm=T)
}
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Weekly performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
#show trend through time
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
}
cond=!is.na(dat$SIS.User.ID) & dat$SIS.User.ID==gsub('-','',input$ufid) &
!is.na(dat$SIS.Login.ID) & dat$SIS.Login.ID==input$email &
!is.na(dat$passwd) & dat$passwd==input$passwd &
!is.na(dat$trat) & dat$trat==2 #second treatment (students selected for performance analytics)
ind=which(cond)
#if student not found
if (sum(cond)==0) {
plot(NA,NA,xlim=c(0,1),ylim=c(0,1))
text(0.5,0.5,'User not found',col='red')
}
#if student found
if (sum(cond)>0){
#fix NA's to make cumulative sum comparable
dat1=dat
ind1=which(is.na(dat[ind,nomes]))
if (length(ind1)>0) dat1[,ind1]=0
dat1=t(apply(dat1[,nomes],1,cumsum))
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat1[ind,nomes[i]] >= dat1[,nomes[i]],na.rm=T)
}
if (sum(cond)==0){
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Cumulative performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
}
}
#fix NA's to make cumulative sum comparable
dat1=dat
ind1=which(is.na(dat[ind,nomes]))
if (length(ind1)>0) dat1[,ind1]=0
dat1=t(apply(dat1[,nomes],1,cumsum))
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat1[ind,nomes[i]] >= dat1[,nomes[i]],na.rm=T)
}
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Cumulative performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
quant
dat1
dat1[ind,nomes]
dat1=dat
ind1=which(is.na(dat[ind,nomes]))
ind1
dat[ind,nomes]
ind1
ind1=which(is.na(dat[ind,nomes]))
if (length(ind1)>0) dat1[,ind1]=0
dat1=t(apply(dat1[,nomes],1,cumsum))
head(dat1)
dat1[ind,nomes]
dat1[ind,nomes]
dat1=dat
ind1=which(is.na(dat[ind,nomes]))
dat1[ind,nomes]
ind1
dat1[,ind1]=0
dat1[,1]
dat1[ind,]
dat1=dat
ind1=which(is.na(dat[ind,]))
if (length(ind1)>0) dat1[,ind1]=0
dat1=t(apply(dat1[,nomes],1,cumsum))
dat1[ind,]
quant=rep(NA,nweek)
for (i in 1:nweek){
quant[i]=mean(dat1[ind,nomes[i]] >= dat1[,nomes[i]],na.rm=T)
}
plot(NA,NA,xlim=c(1,nweek),ylim=c(0,1),main='Cumulative performance',
ylab='Proportion that scored the same or lower',
xlab='Week')
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(-10,-10,1/3,1/3),col=cores[1])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(1/3,1/3,2/3,2/3),col=cores[2])
polygon(x=c(-10,nweek*10,nweek*10,-10),y=c(2/3,2/3,10,10),col=cores[3])
lines(1:nweek,quant)
points(1:nweek,quant,pch=19)
library(shiny)
runApp('U:\\natercia\\student_perf_tool')
